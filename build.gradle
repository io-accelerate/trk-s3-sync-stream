//~~~~ Settings for Gradle
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.0.RC2"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'ch.netzwerg:gradle-release-plugin:1.2.4'
    }

}

apply plugin: 'java'
apply plugin: 'application'

group 'ro.ghionoiu'

//noinspection GroovyUnusedAssignment
targetCompatibility = JavaVersion.VERSION_1_8
//noinspection GroovyUnusedAssignment
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

// ~~~~~ Dependencies

apply plugin: "io.spring.dependency-management"
dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.117'
    }
}

dependencies {
    compile 'com.amazonaws:aws-java-sdk-s3'
    compile 'com.beust:jcommander:1.64'

    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compileOnly 'org.projectlombok:lombok:1.16.16'

    testCompile('junit:junit:4.11'){
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.powermock:powermock-api-mockito:1.7.0RC4'
    testCompile 'org.powermock:powermock-module-junit4:1.7.0RC4'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.7.0RC4'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompileOnly 'org.projectlombok:lombok:1.16.16'
}

// ~~~~~ Packaging

apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = "tdl.s3.SyncFileApp"
jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
}


// ~~~~~ Gather coverage

apply plugin: "jacoco"
apply plugin: "com.github.kt3k.coveralls"

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

//~~~~~ Release management

/**
 * Prerequisites
 *    - Create package in Bintray
 *
 * Now you can use regular maven upload to push files to you package.
 * The version will be created automatically
 *
 * To push to Maven Central use Bintray sync features:
 *    - Created request for jcenter ( if missing )
 *    - Manually sync the two repos
 *
 * To publish new version use the Bintray UI:
 *    - publish current artifacts
 *    - sync with Maven Central
 */
apply plugin: "ch.netzwerg.release"
apply plugin: 'maven'

release {
    dependsOn build // 'distZip' could e.g be used in combination with the 'application' plugin
    push = false // 'true' would e.g. be useful when triggering the release task on a CI server
    versionSuffix = '-SNAPSHOT' // '.DEV' or '' (empty) could be useful alternatives
    tagPrefix = 'v' // 'r' or '' (empty) could be useful alternatives
}

private static String readSystem(String property) {
    System.getenv(property) != null  ? System.getenv(property) : "unset"
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Add the sourceJars to non-extractor modules
artifacts {
    archives sourceJar
    archives javadocJar
}

uploadArchives {
    repositories.mavenDeployer {
        name = 'bintray-julianghionoiu-s3-sync-stream'
        repository(id: 'bintray-julianghionoiu-s3-sync-stream',
                url: 'https://api.bintray.com/maven/julianghionoiu/maven/s3-sync-stream') {
            authentication(userName: readSystem("BINTRAY_USER"), password: readSystem("BINTRAY_KEY"))
        }

        pom.project {
            name 'S3 Sync Stream'
            description 'Library that continuously syncs the contents of a folder to an S3 bucket. Optimised for streaming file formats (video, logs).'
            url 'https://github.com/julianghionoiu/s3-sync-stream'

            developers {
                developer {
                    name 'Iulian (Julian) Ghionoiu'
                    email 'iulian.ghionoiu@gmail.com'
                    organization 'Iulian Ghionoiu'
                    organizationUrl 'https://github.com/julianghionoiu'
                }
            }

            scm {
                connection 'scm:git:git@github.com:julianghionoiu/s3-sync-stream.git'
                developerConnection 'scm:git:git@github.com:julianghionoiu/s3-sync-stream.git'
                url 'git@github.com:julianghionoiu/s3-sync-stream.git'
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
        }
    }
}